{"version":3,"file":"static/js/119.f0f5d67b.chunk.js","mappings":"0SA6GA,UA7FkB,WACjB,IAAMA,GAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAC1BC,GAAcF,EAAAA,EAAAA,YAAWG,EAAAA,GAC/B,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAoB,yCAAG,mFAC5BR,EAAaS,UACXC,IADF,uBAEEC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACRL,EAAWK,EAAKC,SAChB,IACAC,OAAM,SAACC,GACPC,QAAQC,IAAIF,EACZ,IAR0B,2CAAH,qDA0C1B,OA/BAG,EAAAA,EAAAA,YAAU,WACTV,IAEA,IAAMW,EAAiBhB,EAAYiB,OAAOC,UAAU,WAuBpD,OArBAF,EAAeG,KAAK,WAAW,SAACC,GAC/BhB,GAAW,SAACD,GAAD,wBAAiBA,GAAjB,CAA0BiB,GAA1B,IACXvB,EAAawB,cAAexB,EAAayB,WAAa,EACtD,IAEDN,EAAeG,KAAK,WAAW,SAACI,GAC/BnB,EACCD,EAAQqB,KAAI,SAACC,GAAD,OACXA,EAAQC,MAAQH,EAAUG,KAA1B,kBAAqCvB,GAArC,IAA8CoB,UAAAA,IAAcE,CADjD,KAIb5B,EAAawB,cAAexB,EAAayB,WAAa,EACtD,IAEDN,EAAeG,KAAK,eAAe,SAACQ,GACnCvB,EACCD,EAAQyB,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAIH,MAAQC,EAAWG,GAAOJ,GAA9C,KAEhB7B,EAAawB,cAAcxB,EAAayB,WAAa,EACrD,IAEM,WACNN,EAAee,aACff,EAAegB,YAAY,UAC3B,CACD,GAAE,CAACnC,EAAayB,cAEhB,+BACC,UAAC,IAAD,CACCW,GAAI,CACHC,QAAS,OACTC,eAAgB,gBAChBC,cAAe,SACfC,IAAK,GALP,WAQC,SAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,oCAIA,SAAC,IAAD,CAAgBA,UAAWC,EAAAA,EAA3B,UACC,UAAC,IAAD,YACC,SAAC,IAAD,WACC,SAAC,IAAD,UACEC,EAAAA,GAAAA,KAAqB,SAACZ,EAAKC,GAAN,OACrB,SAAC,IAAD,UAAwBD,EAAIa,OAAZZ,EADK,SAKxB,SAAC,IAAD,UACE3B,EAAQqB,KAAI,SAACmB,EAAQb,GACrB,IAAMc,EAAO,IAAIC,KAAJ,OAASF,QAAT,IAASA,OAAT,EAASA,EAAQG,WACxBC,EAAQH,EAAKI,WAAa,EAC1BC,EAAML,EAAKM,UACjB,OACC,UAAC,IAAD,YACC,SAAC,IAAD,oBAAeH,EAAf,cAA0BE,MAC1B,SAAC,IAAD,iBAAYN,QAAZ,IAAYA,OAAZ,EAAYA,EAAQQ,YACpB,SAAC,IAAD,2BAAeR,QAAf,IAAeA,OAAf,EAAeA,EAAQS,KAAKC,UAA5B,mBAAyCV,QAAzC,IAAyCA,OAAzC,EAAyCA,EAAQS,KAAKE,aACtD,SAAC,IAAD,iBAAYX,QAAZ,IAAYA,OAAZ,EAAYA,EAAQY,SACpB,SAAC,IAAD,iBAAYZ,QAAZ,IAAYA,OAAZ,EAAYA,EAAQa,YALN1B,EAQhB,eAOP,C","sources":["pages/Requests/Completed/index.jsx"],"sourcesContent":["import {\n\tBox,\n\tPaper,\n\tTable,\n\tTableBody,\n\tTableCell,\n\tTableContainer,\n\tTableHead,\n\tTableRow,\n\tTypography,\n} from '@mui/material';\nimport { useContext, useEffect, useState } from 'react';\nimport { completedRequest } from '../../../constants/table-headers';\nimport { AuthContext } from '../../../context/AuthContext';\nimport { FetchContext } from '../../../context/FetchContext';\n\nconst Completed = () => {\n\tconst fetchContext = useContext(FetchContext);\n\tconst authContext = useContext(AuthContext);\n\tconst [records, setRecords] = useState([]);\n\n\tconst getCompletedRequests = async () => {\n\t\tfetchContext.authAxios\n\t\t\t.get(`/requests/completed`)\n\t\t\t.then(({ data }) => {\n\t\t\t\tsetRecords(data.requests);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tgetCompletedRequests();\n\n\t\tconst requestChannel = authContext.pusher.subscribe('request');\n\n\t\trequestChannel.bind('created', (newReq) => {\n\t\t\tsetRecords((records) => [...records, newReq]);\n\t\t\tfetchContext.setRefreshKey((fetchContext.refreshKey = +1));\n\t\t});\n\n\t\trequestChannel.bind('updated', (updateReq) => {\n\t\t\tsetRecords(\n\t\t\t\trecords.map((request) =>\n\t\t\t\t\trequest._id === updateReq._id ? { ...records, updateReq } : request\n\t\t\t\t)\n\t\t\t);\n\t\t\tfetchContext.setRefreshKey((fetchContext.refreshKey = +1));\n\t\t});\n\n\t\trequestChannel.bind('deleted-req', (deletedReq) => {\n\t\t\tsetRecords(\n\t\t\t\trecords.filter((req, index) => req._id !== deletedReq[index]._id)\n\t\t\t);\n\t\t\tfetchContext.setRefreshKey(fetchContext.refreshKey + 1);\n\t\t});\n\n\t\treturn () => {\n\t\t\trequestChannel.unbind_all();\n\t\t\trequestChannel.unsubscribe('request');\n\t\t};\n\t}, [fetchContext.refreshKey]);\n\treturn (\n\t\t<>\n\t\t\t<Box\n\t\t\t\tsx={{\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tjustifyContent: 'space-between',\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\tgap: 2,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Typography variant=\"h6\" component=\"h2\">\n\t\t\t\t\tList of All Completed\n\t\t\t\t</Typography>\n\n\t\t\t\t<TableContainer component={Paper}>\n\t\t\t\t\t<Table>\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t{completedRequest.map((req, index) => (\n\t\t\t\t\t\t\t\t\t<TableCell key={index}>{req.label}</TableCell>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{records.map((record, index) => {\n\t\t\t\t\t\t\t\tconst date = new Date(record?.createdAt);\n\t\t\t\t\t\t\t\tconst month = date.getMonth() + 1;\n\t\t\t\t\t\t\t\tconst day = date.getDate();\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow key={index}>\n\t\t\t\t\t\t\t\t\t\t<TableCell>{`${month} - ${day}`}</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>{record?.ticketNo}</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>{`${record?.user.firstName} ${record?.user.lastName}`}</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>{record?.title}</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>{record?.reqType}</TableCell>\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t</Box>\n\t\t</>\n\t);\n};\n\nexport default Completed;\n"],"names":["fetchContext","useContext","FetchContext","authContext","AuthContext","useState","records","setRecords","getCompletedRequests","authAxios","get","then","data","requests","catch","error","console","log","useEffect","requestChannel","pusher","subscribe","bind","newReq","setRefreshKey","refreshKey","updateReq","map","request","_id","deletedReq","filter","req","index","unbind_all","unsubscribe","sx","display","justifyContent","flexDirection","gap","variant","component","Paper","completedRequest","label","record","date","Date","createdAt","month","getMonth","day","getDate","ticketNo","user","firstName","lastName","title","reqType"],"sourceRoot":""}